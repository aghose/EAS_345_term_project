#Author: Akash Ghose
#install.packages("caret")
#install.packages('e1071', dependencies=TRUE)
library(dplyr)
require(graphics)
require(grDevices)
require(class)
library(caret)
mortgage_data <- read.csv("cleaned_data/mortgage_data.csv")
#Simplifies the data so that I'm only looking at loans that were either accepted (1,2) or denied (3),
#Creates boolean columns for whether loans were approved and whether there was a co_applicant
mortgage_data_subset0 <- mortgage_data %>%
filter(action_taken %in% c(1,2,3)) %>%
mutate(loan_approved = if_else(action_taken==3,
true = FALSE,
false = TRUE)) %>%
mutate(co_applicant = if_else(co_applicant_race_1 != 8,
true = TRUE,
false= FALSE)) %>%
relocate(co_applicant, .before= co_applicant_race_name_1) %>%
relocate(loan_approved, .before= action_taken)
#First, I will further clean the data to get a more workable data set
knn_data_set <- mortgage_data_subset0 %>%
mutate(applicant_white = if_else(applicant_race_1==5,
true = 0,
false = 1)) %>%
mutate(co_applicant_white = if_else(co_applicant_race_1==5,
true = 0,
false = 1)) %>%
select(-(contains("name") | contains("race"))) %>%
#Changing co-applicant from boolean to binary so KNN algorithm can
#Calculate the Euclidean distance easier
mutate(co_applicant = if_else(co_applicant==TRUE,
true = 0,
false = 1)) %>%
#similar thing for pre-aproval
mutate(preapproval = if_else(preapproval == 3,
true = 1,
false = 0)) %>%
select(-(c(1, 5, denial_reason_1:number_of_1_to_4_family_units))) %>%
relocate(loan_approved, .after= last_col())
#Creating a function to normalize all my variables
normalize <- function(x) {
return( (x - min(x))/(max(x) - min(x)))
}
#Normalizing my dataset
knn_data_set_norm <- as.data.frame(lapply(knn_data_set[, 1:8], normalize))
kmeans_dataset <- knn_data_set_norm
kmeans_model_00 <- kmeans(kmeans_dataset,5)
kmeans_model_00
kmeans_model_00$centers
kmeans_model_00$totss
kmeans_model_00$size
knitr::opts_chunk$set(echo = TRUE)
source("phase06.R")
#source("phase06.R")
library(shiny)
shiny::shinyAppDir()
#source("phase06.R")
library(shiny)
shiny::shinyAppFile("app.R")
#source("phase06.R")
library(shiny)
ui <- fluidPage(
# Application title
titlePanel("Mortgage data"),
sidebarLayout(
sidebarPanel(
list(hr(),
helpText("Input the nearest-neighbor coefficeint for KNN"),
selectInput(inputId = "k", label = "k coeffecient",
choices = c("k=4","k=5", "k=6",
"k=356", "k=357", "k=358"),
selected = "k=357")
),
list(hr(),
helpText("Input the number of clusters for K-means clustering"),
selectInput(inputId = "clust", label = "clusters",
choices = c("k=3","k=4", "k=5",
"k=6", "k=7", "k=8", "k=9"),
selected = "k=5")
)
),
# Show a plot of the generated distribution
mainPanel(
uiOutput("tabs")
)
)
)
server <- function(input, output, session) {
output$knn <- renderPlot({
if(input$k == "k=358"){plot(knn_model_358)}
if(input$k == "k=357"){plot(knn_model_357)}
if(input$k == "k=356"){plot(knn_model_356)}
if(input$k == "k=6"){plot(knn_model_6)}
if(input$k == "k=5"){plot(knn_model_5)}
if(input$k == "k=4"){plot(knn_model_4)}
})
output$knn_tbl <- renderPlot({
if(input$k == "k=358"){plot(tbl_358)}
if(input$k == "k=357"){plot(tbl_357)}
if(input$k == "k=356"){plot(tbl_356)}
if(input$k == "k=6"){plot(tbl_6)}
if(input$k == "k=5"){plot(tbl_5)}
if(input$k == "k=4"){plot(tbl_4)}
})
output$knn_cmtx <- renderPrint({
if(input$k == "k=358"){confusionMatrix(tbl_358)}
else if(input$k == "k=357"){confusionMatrix(tbl_357)}
else if(input$k == "k=356"){confusionMatrix(tbl_356)}
else if(input$k == "k=6"){confusionMatrix(tbl_6)}
else if(input$k == "k=5"){confusionMatrix(tbl_5)}
else if(input$k == "k=4"){confusionMatrix(tbl_4)}
})
output$kmeans_cntrs <- renderPrint({
if(input$clust == "k=3"){kmeans_model_03$centers}
else if(input$clust == "k=4"){kmeans_model_04$centers}
else if(input$clust == "k=5"){kmeans_model_05$centers}
else if(input$clust == "k=6"){kmeans_model_06$centers}
else if(input$clust == "k=7"){kmeans_model_07$centers}
else if(input$clust == "k=8"){kmeans_model_08$centers}
else if(input$clust == "k=9"){kmeans_model_09$centers}
})
output$kmeans_goodness <- renderPrint({
if(input$clust == "k=3"){kmeans_model_03$betweenss/kmeans_model_03$totss}
else if(input$clust == "k=4"){kmeans_model_04$betweenss/kmeans_model_04$totss}
else if(input$clust == "k=5"){kmeans_model_05$betweenss/kmeans_model_05$totss}
else if(input$clust == "k=6"){kmeans_model_06$betweenss/kmeans_model_06$totss}
else if(input$clust == "k=7"){kmeans_model_07$betweenss/kmeans_model_07$totss}
else if(input$clust == "k=8"){kmeans_model_08$betweenss/kmeans_model_08$totss}
else if(input$clust == "k=9"){kmeans_model_09$betweenss/kmeans_model_09$totss}
})
output$tabs <- renderUI(
tabsetPanel(
tabPanel("KNN model outputs",
plotOutput("knn"),
plotOutput("knn_tbl"),
verbatimTextOutput("knn_cmtx")),
tabPanel("K-means model outputs",
verbatimTextOutput("kmeans_cntrs"),
verbatimTextOutput("kmeans_goodness"))
)
)
}
shinyApp(ui, server)
getwd()
getwd()
library(shiny)
#Run This BEFORE running the app
source("phase06.R")
runApp('C:/Users/asgho/OneDrive/Desktop/UBSchoolWork/CSE/EAS 345/BLM_term_project/phase06')
shinyApp(ui, server)
library(shiny)
ui <- source("ui.R")
server <- source("server.R")
shinyApp(ui, server)
