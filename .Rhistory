mutate(Non_white <- .[[5]]+.[[6]]+.[[7]]+.[[8]])
df <-FBI_arrest_by_race_total %>%
mutate(Non_white = .[[5]]+.[[6]]+.[[7]]+.[[8]])
View(df)
View(df)
View(df)
View(df)
alt_FBI_arrest_by_race_total <-FBI_arrest_by_race_total %>%
mutate(Non_white = .[[5]]+.[[6]]+.[[7]]+.[[8]]) %>%
mutate("% Non_white" = .[[11]]+.[[12]]+.[[13]]+.[[14]])
View(alt_FBI_arrest_by_race_total)
View(df)
alt_FBI_arrest_by_race_total <-FBI_arrest_by_race_total %>%
mutate(Non_white = .[[5]]+.[[6]]+.[[7]]+.[[8]]) %>%
mutate("% Non_white" = .[[11]]+.[[12]]+.[[13]]+.[[14]]) %>%
select(-c(1))
alt_FBI_arrest_by_race_under18 <-FBI_arrest_by_race_under18 %>%
mutate(Non_white = .[[5]]+.[[6]]+.[[7]]+.[[8]]) %>%
mutate("% Non_white" = .[[11]]+.[[12]]+.[[13]]+.[[14]]) %>%
select(-c(1))
alt_FBI_arrest_by_race_18_and_over <-FBI_arrest_by_race_18_and_over %>%
mutate(Non_white = .[[5]]+.[[6]]+.[[7]]+.[[8]]) %>%
mutate("% Non_white" = .[[11]]+.[[12]]+.[[13]]+.[[14]]) %>%
select(-c(1))
View(alt_FBI_arrest_by_race_18_and_over)
colnames(alt_FBI_arrest_by_race_total)
#Combine non-white races into a single column
#Combine %non-whites into a single column
#Drop first column because it is useless
#relocate the new rows to a better position for readability
alt_FBI_arrest_by_race_total <-FBI_arrest_by_race_total %>%
mutate(Non_white = .[[5]]+.[[6]]+.[[7]]+.[[8]]) %>%
mutate("% Non_white" = .[[11]]+.[[12]]+.[[13]]+.[[14]]) %>%
select(-c(1)) %>%
relocate(Non_white, .after = "White") %>%
relocate("% Non_white", .after = "% White")
t
t
alt_FBI_arrest_by_race_under18 <-FBI_arrest_by_race_under18 %>%
mutate(Non_white = .[[5]]+.[[6]]+.[[7]]+.[[8]]) %>%
mutate("% Non_white" = .[[11]]+.[[12]]+.[[13]]+.[[14]]) %>%
select(-c(1)) %>%
relocate(Non_white, .after = "White") %>%
relocate("% Non_white", .after = "% White")
alt_FBI_arrest_by_race_18_and_over <-FBI_arrest_by_race_18_and_over %>%
mutate(Non_white = .[[5]]+.[[6]]+.[[7]]+.[[8]]) %>%
mutate("% Non_white" = .[[11]]+.[[12]]+.[[13]]+.[[14]]) %>%
select(-c(1)) %>%
relocate(Non_white, .after = "White") %>%
relocate("% Non_white", .after = "% White")
View(alt_FBI_arrest_by_race_under18)
View(alt_FBI_arrest_by_race_18_and_over)
library(ggplot2)
colnames(alt_FBI_arrest_by_race_total)
#Plot histograms of total offences charged separated by White, non_white and black
ggplot(alt_FBI_arrest_by_race_total, aes(x=Total) + geom_histogram())
#Plot histograms of total offences charged separated by White, non_white and black
ggplot(alt_FBI_arrest_by_race_total, aes(x="Total") + geom_histogram())
#Plot histograms of total offences charged separated by White, non_white and black
ggplot(alt_FBI_arrest_by_race_total, aes(x="Offense charged", y="Total") + geom_histogram())
#Plot histograms of total offences charged separated by White, non_white and black
ggplot(alt_FBI_arrest_by_race_total, aes(x="Offense charged", y="Total")) + geom_histogram())
#Plot histograms of total offences charged separated by White, non_white and black
ggplot(alt_FBI_arrest_by_race_total, aes(x="Offense charged", y="Total")) + geom_histogram()
#Plot histograms of total offences charged separated by White, non_white and black
ggplot(alt_FBI_arrest_by_race_total, aes(x="Offense charged")) + geom_histogram()
#Plot histograms of total offences charged separated by White, non_white and black
ggplot(alt_FBI_arrest_by_race_total, aes(x="Offense charged"))
#Plot histograms of total offences charged separated by White, non_white and black
ggplot(alt_FBI_arrest_by_race_total, aes(x="White"))
#Plot histograms of total offences charged separated by White, non_white and black
ggplot(alt_FBI_arrest_by_race_total, aes(x="White")) + geom_histogram()
#Plot histograms of total offences charged separated by White, non_white and black
ggplot(alt_FBI_arrest_by_race_total, aes(x="White")) + geom_bar()
rownames(alt_FBI_arrest_by_race_total) = alt_FBI_arrest_by_race_total$`Offense charged`
--------------------------------------------------------------------------------
summary(mortgage_data)
summary(mortgage_data)
--------------------------------------------------------------------------------
#Mortgage data EDA
mortgage_data %>% select(-c(1))
--------------------------------------------------------------------------------
#Mortgage data EDA
mortgage_data <- select(mortgage_data, -c(1))
--------------------------------------------------------------------------------
#Mortgage data EDA
mortgage_data
--------------------------------------------------------------------------------
#Mortgage data EDA
mortgage_data
#Initial look at the cleaned data set
View(mortgage_data)
--------------------------------------------------------------------------------
#Mortgage data EDA
mortgage_data <- select(mortgage_data, -c(1))
mortgage_data <- select(mortgage_data, -c(1))
boxplot(mortgage_data$loan_amount_000s)
colnames(mortgage_data)
ggplot(mortgage_data, aes(y=loan_amount_000s, x=applicant_race_name_1, color=applicant_race_name_1)) + geom_boxplot()
ggplot(mortgage_data, aes(y=loan_amount_000s, x=applicant_race_name_1, color=applicant_race_name_1)) + geom_bar()
ggplot(mortgage_data, aes(y=loan_amount_000s, x=applicant_race_name_1, color=applicant_race_name_1)) + geom_histogram()
ggplot(mortgage_data, aes(y=loan_amount_000s, color=applicant_race_name_1)) + geom_histogram()
ggplot(mortgage_data, aes(x=action_taken_name) + geom_bar())
ggplot(mortgage_data, aes(x=action_taken_name)) + geom_bar()
ggplot(mortgage_data, aes(x=action_taken)) + geom_bar()
ggplot(mortgage_data, aes(x=action_taken, color=applicant_race_name_1)) + geom_bar()
ggplot(mortgage_data, aes(x=action_taken, color=applicant_race_name_1, fill=TRUE)) + geom_bar()
barplot <- ggplot(mortgage_data, aes(x=action_taken)) + geom_bar()
barplot +ggplot(aes(color=applicant_race_name_1))
barplot + geom_bar(color=applicant_race_name_1)
barplot <- ggplot(mortgage_data, aes(x=action_taken, color=applicant_race_name_1)) + geom_bar()
barplot
summary(mortgage_data)
--------------------------------------------------------------------------------
#FBI arrest data EDA
#Initial look at the cleaned data sets
head(FBI_arrest_by_race_total)
head(FBI_arrest_by_race_total)
colnames(FBI_arrest_by_race_total)
count(mortgage_data$applicant_race_name_1)
count(mortgage_data)
summarise(mortgage_data)
summary(mortgage_data)
colnames(FBI_arrest_by_race_total)
info(mortgage_data)
summary(mortgage_data)
#Author: Akash Ghose
#install.packages("caret")
#install.packages('e1071', dependencies=TRUE)
library(dplyr)
require(graphics)
require(grDevices)
require(class)
library(caret)
mortgage_data <- read.csv("cleaned_data/mortgage_data.csv")
#Simplifies the data so that I'm only looking at loans that were either accepted (1,2) or denied (3),
#Creates boolean columns for whether loans were approved and whether there was a co_applicant
mortgage_data_subset0 <- mortgage_data %>%
filter(action_taken %in% c(1,2,3)) %>%
mutate(loan_approved = if_else(action_taken==3,
true = FALSE,
false = TRUE)) %>%
mutate(co_applicant = if_else(co_applicant_race_1 != 8,
true = TRUE,
false= FALSE)) %>%
relocate(co_applicant, .before= co_applicant_race_name_1) %>%
relocate(loan_approved, .before= action_taken)
"LM models"
#LM - loan vs applicant_income and applicant_race
lm_model_00 <- lm(loan_amount_000s ~ applicant_income_000s+
applicant_race_1,
data = mortgage_data_subset0)
lm_model_00
summary(lm_model_00)
plot(lm_model_00)
"KNN models"
#First, I will further clean the data to get a more workable data set
knn_data_set <- mortgage_data_subset0 %>%
mutate(applicant_white = if_else(applicant_race_1==5,
true = 0,
false = 1)) %>%
mutate(co_applicant_white = if_else(co_applicant_race_1==5,
true = 0,
false = 1)) %>%
select(-(contains("name") | contains("race"))) %>%
#Changing co-applicant from boolean to binary so KNN algorithm can
#Calculate the Euclidean distance easier
mutate(co_applicant = if_else(co_applicant==TRUE,
true = 0,
false = 1)) %>%
#similar thing for pre-aproval
mutate(preapproval = if_else(preapproval == 3,
true = 1,
false = 0)) %>%
select(-(c(1, 5, denial_reason_1:number_of_1_to_4_family_units))) %>%
relocate(loan_approved, .after= last_col())
#Creating a function to normalize all my variables
normalize <- function(x) {
return( (x - min(x))/(max(x) - min(x)))
}
#Normalizing my dataset
knn_data_set_norm <- as.data.frame(lapply(knn_data_set[, 1:8], normalize))
n <- 114953 #roughly 90% of my data
k <- 357 #roughly the sqrt of my total observations
knn_train <- knn_data_set_norm[1:n,]
knn_test <- knn_data_set_norm[(n+1):nrow(knn_data_set_norm),]
knn_train_target <- knn_data_set[1:n, 9]
knn_test_target <- knn_data_set[(n+1):nrow(knn_data_set), 9]
#Time for the actual model
#K = k
knn_model_00 <- knn(train = knn_train, test = knn_test,
cl= knn_train_target, k= k)
knn_model_00
tbl_00 <- table(knn_test_target, knn_model_00)
tbl_00
plot(knn_model_00)
plot(tbl_00)
plot(confusionMatrix(tbl_00))
confusionMatrix(tbl_00)
shiny::runApp('phase06')
runApp('phase06')
runApp('phase06')
runApp('phase06')
#increases max input size to 45 MB
shiny.maxRequestSize=45*1024^2
runApp('phase06')
runApp('phase06')
runApp('phase06')
runApp('phase06')
runApp('phase06')
runApp('phase06')
runApp('phase06')
shiny::runApp('phase06')
##KNN confusion_matrix table plot##
output$confusion_tbl <-renderPrint(
confusionMatrix(tbl_00)
)
runApp('phase06')
runApp('phase06')
runApp('phase06')
runApp('phase06')
library(shiny)
library(dplyr)
require(graphics)
require(grDevices)
require(class)
library(caret)
mortgage_data <- read.csv("cleaned_data/mortgage_data.csv")
set.seed(3423)
#Simplifies the data so that I'm only looking at loans that were either accepted (1,2) or denied (3),
#Creates boolean columns for whether loans were approved and whether there was a co_applicant
mortgage_data_subset0 <- mortgage_data %>%
filter(action_taken %in% c(1,2,3)) %>%
mutate(loan_approved = if_else(action_taken==3,
true = FALSE,
false = TRUE)) %>%
mutate(co_applicant = if_else(co_applicant_race_1 != 8,
true = TRUE,
false= FALSE)) %>%
relocate(co_applicant, .before= co_applicant_race_name_1) %>%
relocate(loan_approved, .before= action_taken)
"KNN models"
#First, I will further clean the data to get a more workable data set
knn_data_set <- mortgage_data_subset0 %>%
mutate(applicant_white = if_else(applicant_race_1==5,
true = 0,
false = 1)) %>%
mutate(co_applicant_white = if_else(co_applicant_race_1==5,
true = 0,
false = 1)) %>%
select(-(contains("name") | contains("race"))) %>%
#Changing co-applicant from boolean to binary so KNN algorithm can
#Calculate the Euclidean distance easier
mutate(co_applicant = if_else(co_applicant==TRUE,
true = 0,
false = 1)) %>%
#similar thing for pre-aproval
mutate(preapproval = if_else(preapproval == 3,
true = 1,
false = 0)) %>%
select(-(c(1, 5, denial_reason_1:number_of_1_to_4_family_units))) %>%
relocate(loan_approved, .after= last_col()) %>%
filter(sample_n(1000))
#First, I will further clean the data to get a more workable data set
knn_data_set <- mortgage_data_subset0 %>%
mutate(applicant_white = if_else(applicant_race_1==5,
true = 0,
false = 1)) %>%
mutate(co_applicant_white = if_else(co_applicant_race_1==5,
true = 0,
false = 1)) %>%
select(-(contains("name") | contains("race"))) %>%
#Changing co-applicant from boolean to binary so KNN algorithm can
#Calculate the Euclidean distance easier
mutate(co_applicant = if_else(co_applicant==TRUE,
true = 0,
false = 1)) %>%
#similar thing for pre-aproval
mutate(preapproval = if_else(preapproval == 3,
true = 1,
false = 0)) %>%
select(-(c(1, 5, denial_reason_1:number_of_1_to_4_family_units))) %>%
relocate(loan_approved, .after= last_col()) %>%
sample_n(1000)
runApp('phase06')
source('phase06.R')
source('phase06/phase06.R')
runApp('phase06')
getwd()
setwd("~/phase06")
setwd("/phase06")
setwd("C:/Users/asgho/OneDrive/Desktop/UBSchoolWork/CSE/EAS 345/BLM_term_project/phase05")
getwd()
setwd("C:/Users/asgho/OneDrive/Desktop/UBSchoolWork/CSE/EAS 345/BLM_term_project/phase05")
---
title: "Systemic racism in America"
author: "Akash Ghose"
date: "12/6/2020"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
---
title: "Systemic racism in America"
author: "Akash Ghose"
date: "12/6/2020"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
---
title: "Systemic racism in America"
author: "Akash Ghose"
date: "12/6/2020"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
mortgage_data <- read_csv("cleaned_data/mortgage_data.csv")
library(dplyr)
library(readr)
library(ggplot2)
mortgage_data <- read_csv("cleaned_data/mortgage_data.csv")
View(mortgage_data)
View(mortgage_data)
mortgage_data <- select(mortgage_data, -c(1))
ggplot(mortgage_data, aes(y=loan_amount_000s, x=applicant_race_1,
color=applicant_race_name_1)) + geom_boxplot()
#First, I will further clean the data to get a more workable data set
knn_data_set <- mortgage_data_subset0 %>%
mutate(applicant_white = if_else(applicant_race_1==5,
true = 0,
false = 1)) %>%
mutate(co_applicant_white = if_else(co_applicant_race_1==5,
true = 0,
false = 1)) %>%
select(-(contains("name") | contains("race"))) %>%
#Changing co-applicant from boolean to binary so KNN algorithm can
#Calculate the Euclidean distance easier
mutate(co_applicant = if_else(co_applicant==TRUE,
true = 0,
false = 1)) %>%
#similar thing for pre-aproval
mutate(preapproval = if_else(preapproval == 3,
true = 1,
false = 0)) %>%
select(-(c(1, 5, denial_reason_1:number_of_1_to_4_family_units))) %>%
relocate(loan_approved, .after= last_col())
#Creating a function to normalize all my variables
normalize <- function(x) {
return( (x - min(x))/(max(x) - min(x)))
}
#Normalizing my dataset
knn_data_set_norm <- as.data.frame(lapply(knn_data_set[, 1:8], normalize))
n <- 114953 #roughly 90% of my data
k <- 357 #roughly the sqrt of my total observations
knn_train <- knn_data_set_norm[1:n,]
knn_test <- knn_data_set_norm[(n+1):nrow(knn_data_set_norm),]
knn_train_target <- knn_data_set[1:n, 9]
knn_test_target <- knn_data_set[(n+1):nrow(knn_data_set), 9]
#Time for the actual model
#K = k
knn_model_00 <- knn(train = knn_train, test = knn_test,
cl= knn_train_target, k= k)
require(grDevices)
require(class)
library(caret)
#Normalizing my dataset
knn_data_set_norm <- as.data.frame(lapply(knn_data_set[, 1:8], normalize))
n <- 114953 #roughly 90% of my data
k <- 357 #roughly the sqrt of my total observations
knn_train <- knn_data_set_norm[1:n,]
#First, I will further clean the data to get a more workable data set
knn_data_set <- mortgage_data_subset0 %>%
mutate(applicant_white = if_else(applicant_race_1==5,
true = 0,
false = 1)) %>%
mutate(co_applicant_white = if_else(co_applicant_race_1==5,
true = 0,
false = 1)) %>%
select(-(contains("name") | contains("race"))) %>%
#Changing co-applicant from boolean to binary so KNN algorithm can
#Calculate the Euclidean distance easier
mutate(co_applicant = if_else(co_applicant==TRUE,
true = 0,
false = 1)) %>%
#similar thing for pre-aproval
mutate(preapproval = if_else(preapproval == 3,
true = 1,
false = 0)) %>%
select(-(c(1, 5, denial_reason_1:number_of_1_to_4_family_units))) %>%
relocate(loan_approved, .after= last_col())
#Creating a function to normalize all my variables
normalize <- function(x) {
return( (x - min(x))/(max(x) - min(x)))
}
#Normalizing my dataset
knn_data_set_norm <- as.data.frame(lapply(knn_data_set[, 1:8], normalize))
#First, I will further clean the data to get a more workable data set
knn_data_set <- mortgage_data_subset0 %>%
mutate(applicant_white = if_else(applicant_race_1==5,
true = 0,
false = 1)) %>%
mutate(co_applicant_white = if_else(co_applicant_race_1==5,
true = 0,
false = 1)) %>%
select(-(contains("name") | contains("race"))) %>%
#Changing co-applicant from boolean to binary so KNN algorithm can
#Calculate the Euclidean distance easier
mutate(co_applicant = if_else(co_applicant==TRUE,
true = 0,
false = 1)) %>%
#similar thing for pre-aproval
mutate(preapproval = if_else(preapproval == 3,
true = 1,
false = 0)) %>%
select(-(c(1, 5, denial_reason_1:number_of_1_to_4_family_units))) %>%
relocate(loan_approved, .after= last_col())
#Author: Akash Ghose
#install.packages("caret")
#install.packages('e1071', dependencies=TRUE)
library(dplyr)
require(graphics)
require(grDevices)
require(class)
library(caret)
mortgage_data <- read.csv("cleaned_data/mortgage_data.csv")
#Simplifies the data so that I'm only looking at loans that were either accepted (1,2) or denied (3),
#Creates boolean columns for whether loans were approved and whether there was a co_applicant
mortgage_data_subset0 <- mortgage_data %>%
filter(action_taken %in% c(1,2,3)) %>%
mutate(loan_approved = if_else(action_taken==3,
true = FALSE,
false = TRUE)) %>%
mutate(co_applicant = if_else(co_applicant_race_1 != 8,
true = TRUE,
false= FALSE)) %>%
relocate(co_applicant, .before= co_applicant_race_name_1) %>%
relocate(loan_approved, .before= action_taken)
#First, I will further clean the data to get a more workable data set
knn_data_set <- mortgage_data_subset0 %>%
mutate(applicant_white = if_else(applicant_race_1==5,
true = 0,
false = 1)) %>%
mutate(co_applicant_white = if_else(co_applicant_race_1==5,
true = 0,
false = 1)) %>%
select(-(contains("name") | contains("race"))) %>%
#Changing co-applicant from boolean to binary so KNN algorithm can
#Calculate the Euclidean distance easier
mutate(co_applicant = if_else(co_applicant==TRUE,
true = 0,
false = 1)) %>%
#similar thing for pre-aproval
mutate(preapproval = if_else(preapproval == 3,
true = 1,
false = 0)) %>%
select(-(c(1, 5, denial_reason_1:number_of_1_to_4_family_units))) %>%
relocate(loan_approved, .after= last_col())
#Creating a function to normalize all my variables
normalize <- function(x) {
return( (x - min(x))/(max(x) - min(x)))
}
#Normalizing my dataset
knn_data_set_norm <- as.data.frame(lapply(knn_data_set[, 1:8], normalize))
n <- 114953 #roughly 90% of my data
k <- 357 #roughly the sqrt of my total observations
knn_train <- knn_data_set_norm[1:n,]
knn_test <- knn_data_set_norm[(n+1):nrow(knn_data_set_norm),]
knn_train_target <- knn_data_set[1:n, 9]
knn_test_target <- knn_data_set[(n+1):nrow(knn_data_set), 9]
#Time for the actual model
#K = k
knn_model_00 <- knn(train = knn_train, test = knn_test,
cl= knn_train_target, k= k)
knn_model_00
tbl_00 <- table(knn_test_target, knn_model_00)
tbl_00
plot(knn_model_00)
plot(tbl_00)
cmtx <-confusionMatrix(tbl_00)
cmtx %>% typeof()
plot(confusionMatrix(tbl_00))
cmtx
#K = 5
knn_model_01 <- knn(train = knn_train, test = knn_test,
cl= knn_train_target, k= 5)
tbl_01 <- table(knn_test_target, knn_model_01)
tbl_01
knn_model_01
plot(knn_model_01)
tbl_01
confusionMatrix(tbl_01)
source("phase05.R")
shiny::runApp('phase06')
